# -----------------------------------------------------------------------------
#                        SLAM system definition for MOLA
# This file defines:
# An input sensor from a ROS 2 topic, and the MOLA Visualizer.
# -----------------------------------------------------------------------------

modules:
  # =====================
  # MolaViz
  # =====================
  - name: viz
    type: mola::MolaViz
    verbosity_level: '${MOLA_VERBOSITY_MOLA_VIZ|INFO}'
    params: ~ # none

# Offline or online sensory data sources =====================
  # =====================
  # KittiOdometryDataset
  # =====================
  - name: dataset_input
    type: mola::KittiOdometryDataset
    execution_rate: 20 # Hz
    #verbosity_level: INFO
    quit_mola_app_on_dataset_end: ${MOLA_QUIT_ON_DATASET_END|false}
    
    gui_preview_sensors:
      - raw_sensor_label: lidar
        decimation: 1
        win_pos: 5 70 400 400
      - raw_sensor_label: image_0
        decimation: 1
        win_pos: 5 370 600 200
    params:
      base_dir: ${KITTI_BASE_DIR}
      sequence: ${KITTI_SEQ}
      time_warp_scale: ${MOLA_TIME_WARP|1.0}
      start_paused: ${MOLA_DATASET_START_PAUSED|false}
      publish_lidar: true
      publish_image_0: true
      publish_image_1: true
      publish_ground_truth: true

  - name: lidar_odom
    type: mola::LidarOdometry
    verbosity_level: '${MOLA_VERBOSITY_MOLA_LO|INFO}'
    raw_data_source: 'dataset_input'
    # This includes here a whole block "params: (...)"
    # with the LIDAR-Odometry pipeline configuration:
    params: '${MOLA_ODOMETRY_PIPELINE_YAML|../pipelines/lidar3d-default.yaml}'

  - name: state_estimation
    type: '${MOLA_STATE_ESTIMATOR|mola::state_estimation_simple::StateEstimationSimple}'
    verbosity_level: '${MOLA_VERBOSITY_MOLA_STATE_ESTIMATOR|INFO}'

    # This includes here a whole block "params: (...)":
    params: '${MOLA_STATE_ESTIMATOR_YAML|../state-estimator-params/state-estimation-simple.yaml}'

  # MOLA -> ROS 2 bridge  =====================
  - name: ros2_bridge
    type: mola::BridgeROS2
    verbosity_level: '${MOLA_VERBOSITY_BRIDGE_ROS2|INFO}'

    execution_rate: 20 # Hz

    params:
      # tf frame name with respect to sensor poses are measured, and also used for publishing
      # SLAM/localization results (read below).
      base_link_frame: 'base_link'

      # If not empty, the node will broadcast a static /tf from base_footprint to
      # base_link with the TF base_footprint_to_base_link_tf at start up.
      #base_footprint_frame: 'base_footprint'
      #base_footprint_to_base_link_tf: '[x y z yaw_deg pitch_deg roll_deg]'

      # Used for:
      # (a) importing odometry to MOLA if ``forward_ros_tf_as_mola_odometry_observations=true``
      # (b) querying ``${odom_frame} => ${base_link_frame}`` when
      #     ``publish_localization_following_rep105=true``.
      odom_frame: 'odom'

      # tf frame used for:
      # (a) See ``publish_tf_from_robot_pose_observations``
      # (b) To follow REP105 (``publish_localization_following_rep105``), this must match
      #     the frame used as reference in the LocalizationSource (e.g. mola_lidar_odometry)
      reference_frame: odom

      # If enabled, during spinOnce(), the tf ``${odom_frame} => ${base_link_frame}`` will
      # be queried and forwarded as an `CObservationOdometry` reading to the MOLA subsystem:
      forward_ros_tf_as_mola_odometry_observations: false

      # If enabled, SLAM/Localization results will be published as nav_msgs/Odometry messages.
      publish_odometry_msgs_from_slam: true

      # If enabled, robot pose observations (typically, ground truth from datasets), will be
      # forwarded to ROS as /tf messages: ``${reference_frame} => ${base_link}``
      publish_tf_from_robot_pose_observations: false

      # Kitti does not have an "odom" frame, so it's OK for MOLA-LO to publish /tf: "map" -> "base_link"

      # How to publish localization to /tf:
      # - ``false``(direct mode): reference_frame ("map") -> base_link ("base_link")
      #   Note that reference_frame in this case comes from the localization source module
      #   (e.g. mola_lida_odometry), it is not configured here.
      #
      #  - ``true`` (indirect mode), following ROS [REP
      #  105](https://ros.org/reps/rep-0105.html):
      #   ``map -> odom``  (such as "map -> odom -> base_link" = "map -> base_link")
      publish_localization_following_rep105: false

      # If enabled, SLAM/Localization results will be published as tf messages, for frames
      # according to explained above for `publish_localization_following_rep105`.
      publish_tf_from_slam: true

      # If true, the original dataset timestamps will be used to publish.
      # Otherwise, the wallclock time will be used.
      publish_in_sim_time: false

      period_publish_new_localization: 0.1 # [s]
      period_publish_new_map: 5.0 # [s]

      # georeferenced map frames:
      georef_map_reference_frame: 'map'
      georef_map_utm_frame: 'utm'
      georef_map_enu_frame: 'enu'
