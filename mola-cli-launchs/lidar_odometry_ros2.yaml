# -----------------------------------------------------------------------------
#                        SLAM system definition for MOLA
#
# This file defines: Input and output with ROS 2, the MOLA Visualizer.
# This can be launched with the ROS2 launch file "ros2-lidar-odometry.launch.py"
# -----------------------------------------------------------------------------

modules:
  # =====================
  # MolaViz
  # =====================
  - name: viz
    type: mola::MolaViz
    enabled: ${MOLA_WITH_GUI|true}
    verbosity_level: '${MOLA_VERBOSITY_MOLA_VIZ|INFO}'
    params: ~ # none

  # =====================
  # LidarOdometry
  # =====================
  - name: lidar_odom
    type: mola::LidarOdometry
    verbosity_level: '${MOLA_VERBOSITY_MOLA_LO|INFO}'
    raw_data_source: 'ros2_bridge'
    # This includes here a whole block "params: (...)"
    # with the LIDAR-Odometry pipeline configuration:
    params: '${MOLA_ODOMETRY_PIPELINE_YAML|../pipelines/lidar3d-default.yaml}'

  # =====================
  # State Estimation
  # =====================
  - name: state_estimation
    type: '${MOLA_STATE_ESTIMATOR|mola::state_estimation_simple::StateEstimationSimple}'
    verbosity_level: '${MOLA_VERBOSITY_MOLA_STATE_ESTIMATOR|INFO}'

    # This includes here a whole block "params: (...)":
    params: '${MOLA_STATE_ESTIMATOR_YAML|../state-estimator-params/state-estimation-simple.yaml}'

  # =====================
  # ROS2 <-> MOLA
  # =====================
  - type: mola::BridgeROS2
    name: ros2_bridge
    verbosity_level: '${MOLA_VERBOSITY_BRIDGE_ROS2|INFO}'
    export_to_rawlog: ${MOLA_BRIDGE_ROS2_EXPORT_TO_RAWLOG_FILE|''}

    # In BridgeROS2, this execution rate (Hz) determines the
    # rate of publishing odometry observations, if enabled.
    # All other subscribed sensors are forwarded to the MOLA
    # system without delay as they are received from ROS.
    execution_rate: 20 # Hz

    gui_preview_sensors:
      - raw_sensor_label: ${MOLA_LIDAR_NAME|lidar}
        decimation: 1
        enabled: ${MOLA_WITH_GUI|true}
        win_pos: 5 5 400 400

    params:
      # Whenever a MOLA odometry/SLAM system publishes a new pose estimate
      # it will be forwarded to /tf as a transformation between: 
      # `reference_frame` -> `base_link_frame`
      reference_frame: '${MOLA_TF_MAP|map}'
      base_link_frame: '${MOLA_TF_BASE_FOOTPRINT|base_link}'
      odom_frame: '${MOLA_TF_ESTIMATED_ODOMETRY|odom}'

      # Direct mode (false):
      #  reference_frame ("map") -> base_link ("base_link")
      #
      # Indirect mode (true), following ROS REP 105 https://ros.org/reps/rep-0105.html
      #  map -> odom  (such as "map -> odom -> base_link" = "map -> base_link")
      #
      publish_localization_following_rep105: ${MOLA_LOCALIZ_USE_REP105|true}

      # If true, the /tf 'odom_frame'->'base_link_frame' will be forwarded to MOLA as CObservationOdometry.
      forward_ros_tf_as_mola_odometry_observations: false

      # If true, an nav_msgs/Odometry message will be also published from SLAM solution:
      publish_odometry_msgs_from_slam: true

      # do not publish to /tf from ground_truth, if available
      publish_tf_from_robot_pose_observations: false

      # If not empty, this defines a topic name (type: geometry_msgs/PoseWithCovarianceStamped)
      # to subscribe to. Each received message will map to requests to re-localize to MOLA modules
      # in the system implementing `mola::Relocalization`:
      relocalize_from_topic: '/initialpose'

      # Everything published to ROS2 will have timestamps from:
      #  - true: the original dataset timestamps.
      #  - false: the wall-clock time.
      publish_in_sim_time: false

      # Period [s] to publish new localization estimates to ROS2 from the MOLA SLAM solution:
      period_publish_new_localization: 0.1 # [s]

      # Period [s] to publish the updated map to ROS2 from the MOLA SLAM solution:
      period_publish_new_map: 3.0 # [s]

      # A placeholder for optional flags from "ros2 launch", captured
      # as all cli arguments after "--ros-args":
      ros_args: '${ROS_ARGS|"[]"}'

      # ROS2 topics to be forwarded to the MOLA system:
      subscribe:
        - topic: ${MOLA_LIDAR_TOPIC|/ouster/points}
          msg_type: PointCloud2
          output_sensor_label: ${MOLA_LIDAR_NAME|lidar}
          # If present, this will override whatever /tf tells about the sensor pose:
          fixed_sensor_pose: "${LIDAR_POSE_X|0} ${LIDAR_POSE_Y|0} ${LIDAR_POSE_Z|0} ${LIDAR_POSE_YAW|0} ${LIDAR_POSE_PITCH|0} ${LIDAR_POSE_ROLL|0}"  # 'x y z yaw_deg pitch_deg roll_deg''
          use_fixed_sensor_pose: ${MOLA_USE_FIXED_LIDAR_POSE|false}

        - topic: ${MOLA_GNSS_TOPIC|/gps}
          msg_type: NavSatFix
          output_sensor_label: 'gps'
          # If present, this will override whatever /tf tells about the sensor pose:
          fixed_sensor_pose: "${GNSS_POSE_X|0} ${GNSS_POSE_Y|0} ${GNSS_POSE_Z|0} ${GNSS_POSE_YAW|0} ${GNSS_POSE_PITCH|0} ${GNSS_POSE_ROLL|0}"  # 'x y z yaw_deg pitch_deg roll_deg''
          use_fixed_sensor_pose: ${MOLA_USE_FIXED_GNSS_POSE|true}

        - topic: ${MOLA_IMU_TOPIC|/imu}
          msg_type: Imu
          output_sensor_label: 'imu'
          # If present, this will override whatever /tf tells about the sensor pose:
          fixed_sensor_pose: "${IMU_POSE_X|0} ${IMU_POSE_Y|0} ${IMU_POSE_Z|0} ${IMU_POSE_YAW|0} ${IMU_POSE_PITCH|0} ${IMU_POSE_ROLL|0}"  # 'x y z yaw_deg pitch_deg roll_deg''
          use_fixed_sensor_pose: ${MOLA_USE_FIXED_IMU_POSE|true}

        #- topic: /odom
        #  msg_type: Odometry
        #  output_sensor_label: odom
